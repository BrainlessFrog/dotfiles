#!/bin/bash
# panel_functions - By BrainlessFrog
# Unicodes characters requires Terminus and StlArch fonts

# Sourcing colors and configs:
# Variable return the code without '#', use '#${Var}' or '#FF${Var}'
. panel_config

# Battery
getBattery() {
    local status=`cat /sys/class/power_supply/BAT0/status`
    local level=`cat /sys/class/power_supply/BAT0/capacity`
    if [[ "$level" -lt 10 ]]; then
        local batteryColor="#FF${COLOR_TERM_RED_DARK}"
    elif [[ "$level" -lt 41 ]]; then
        local batteryColor="#FF${COLOR_TERM_YELLOW_DARK}"
    elif [[ "$level" -lt 71 ]]; then
        local batteryColor="#FF${COLOR_TERM_GREEN_BRIGHT}"
    else
        local batteryColor="#FF${COLOR_TERM_GREEN_DARK}"
    fi

    if [[ "$status" == "Charging" ]]; then
        echo -e "%{F$batteryColor}\uE041 %{F-}$level%%"
    else
        if [[ "$level" -lt 10 ]]; then
            echo -e "%{F$batteryColor}\uE038 %{F-}$level%%"
        elif [[ "$level" -lt 41 ]]; then
            echo -e "%{F$batteryColor}\uE039 %{F-}$level%%"
        elif [[ "$level" -lt 71 ]]; then
            echo -e "%{F$batteryColor}\uE03A %{F-}$level%%"
        else
            echo -e "%{F$batteryColor}\uE03B %{F-}$level%%"
        fi
    fi
}

# Clock
getClock() {
    local currentTime=`date "+%H:%M"`
    local comStart='%{A1:notify-send -t 10 "$(date \"+%A %d %B\")" "$(cal)":}'
    local comStop="%{A}"
    echo -e "${comStart}%{F#FF${COLOR_TERM_WHITE_DARK}}\uE015 %{F-}${currentTime}${comStop}"
}

# Moc
getMoc() {
    if [[ "$(pidof mocp)" ]]; then
        local mocState=`mocp -Q '%state'`
        case "$mocState" in
            "STOP")
                local mocPlay="%{A1:mocp -p:}%{A2:mocp -x:}Stopped%{A}%{A}"
                #local mocPlay="%{A1:mocp -p:}Stopped%{A}"
                ;;
            "PAUSE")
                local mocPlay="%{A1:mocp -G:}%{A2:mocp -x:}%{A3:mocp -s:}`mocp -Q '%artist - %song'` (Paused)%{A}%{A}%{A}"
                #local mocPlay="%{A1:mocp -G:}`mocp -Q '%artist - %song'` (Paused)%{A}"
                ;;
            *)
                local mocPlay="%{A1:mocp -G:}%{A2:mocp -x:}%{A3:mocp -s:}`mocp -Q '%artist - %song'`%{A}%{A}%{A}"
                #local mocPlay="%{A1:mocp -G:}`mocp -Q '%artist - %song'`%{A}"
                ;;
        esac
        echo -e "%{F#FF${COLOR_TERM_WHITE_DARK}}\uE05C %{F-}${mocPlay}"
    else
        echo -e "%{F#FF${COLOR_TERM_WHITE_DARK}}\uE05C %{F-}%{A1:urxvtc -e 'mocp':}Not running%{A}"
    fi
}

# Network
getNetwork() {
    # Modified from z3bra
    # iplink return 3 connections : lo (loopback), ethx and wlanx
    # Detect connections, remove useless characters to keep only 'lo', 'ethx' and 'wlanx'
    # Store them in $lo $int1 $int2
    local lo=""
    local int1=""
    local int2=""
    read lo int1 int2 <<< `ip link | sed -n 's/^[0-9]: \(.*\):.*$/\1/p'`
    # Test if $int1 is a wifi connection : iwconfig return $?=0 (true) if it is, and $?=161 if it's not
    if iwconfig $int1 > /dev/null 2>&1; then
        # If true, assign $wifi=wlanx and $eth0=ethx
        local wifi=$int1
        local eth0=$int2
    else
        # Else, it's the opposite
        local wifi=$int2
        local eth0=$int1
    fi
    # Check if ethx is connected, if it is, grep will return $?=0 (true), and $int=$eth0. Else, $int=$wifi
    ip link show $eth0 | grep 'state UP' > /dev/null && local int="eth0" || local int="wifi" && local essid=`iwgetid | cut -d '"' -f 2`

    # Check if the connection is working, if it is, ping will return $?=0 (true)
    ping -c 1 8.8.8.8 > /dev/null 2>&1 && local state=true || local state=false

    #Show connections :
    # Eth0
    if [[ "$int" == "eth0" ]]; then
        $state && echo -e "%{F#FF${COLOR_TERM_WHITE_DARK}}\uE0F0 %{F-}$eth0" || echo -e "%{F#FF${COLOR_TERM_WHITE_DARK}}\uE0F0 %{F-}Disconnected"
    # Wifi
    else
        if [[ "$state" == "true" ]]; then
            # Get the signal strengh
            if [[ "$(iwconfig $wifi | grep 'Quality')" ]]; then
                # The easy way
                local reception=`iwconfig $wifi | grep 'Quality' | cut -d '=' -f 2 | cut -d ' ' -f 1 | cut -d '/' -f 1` 
                local total=`iwconfig $wifi | grep 'Quality' | cut -d '=' -f 2 | cut -d ' ' -f 1 | cut -d '/' -f 2` 
            else
                # The hard way (easy way may require sudo)
                local reception=`iwlist $wifi scan | grep -e 'Quality' -e "$essid" | sed -e "/$essid/,$ d" | tail -n 1 | cut -d '=' -f 2 | cut -d ' ' -f 1 | cut -d '/' -f 1` 
                local total=`iwlist $wifi scan | grep -e 'Quality' -e "$essid" | sed -e "/$essid/,$ d" | tail -n 1 | cut -d '=' -f 2 | cut -d ' ' -f 1 | cut -d '/' -f 2` 
            fi

            local signal=$((reception*100 / total))
            if [[ "$signal" -lt 10 ]]; then
                echo -e "%{F#FF${COLOR_TERM_RED_DARK}}\uE0EE %{F-}$essid"
            elif [[ "$signal" -lt 41 ]]; then
                echo -e "%{F#FF${COLOR_TERM_YELLOW_DARK}}\uE0EE %{F-}$essid"
            elif [[ "$signal" -lt 71 ]]; then
                echo -e "%{F#FF${COLOR_TERM_GREEN_BRIGHT}}\uE0EF %{F-}$essid"
            else
                echo -e "%{F#FF${COLOR_TERM_GREEN_DARK}}\uE0F0 %{F-}$essid"
            fi
        else
            echo -e "%{F#FF${COLOR_TERM_WHITE_DARK}}\uE0F0 %{F-}Disconnected"
        fi
    fi
}

# Stalonetray
getStalonetray() {
    local textOut=""

    if [[ "$(pgrep stalonetray)" ]]; then
        local stID=`xdo id -N stalonetray | head -n 1`

        local stWidth=`xprop -id "$stID" | grep 'user specified size' | cut -d ':' -f 2 | awk '{print $1}'`
        local stInc=`xprop -id "$stID" | grep 'increment' | cut -d ':' -f 2 | awk '{print $1}'`
        
        if [[ "$stWidth" -ne 0 ]]; then
            for i in `seq 1 $((stWidth / stInc))`; do
                textOut="$textOut    "
            done
        fi
    fi

    echo "$textOut"
}

# Updates
getUpdates() {
    local systemType="$1"
    
    if [[ "$systemType" == "-a" ]]; then
        local number=`checkupdates | wc -l`
        local comStart='%{A1:notify-send -t 10 "Updates" "$(checkupdates)":}'
        local comStop="%{A}"
    elif [[ "$systemType" == "-d" ]]; then
        if [[ -e "/tmp/updatesNumber.txt" ]]; then
            local number=`cat /tmp/updatesNumber.txt`
            local comStart=""
            local comStop=""
        else
            local number="0"
            local comStart=""
            local comStop=""
        fi
    else
        local number=`checkupdates | wc -l`
        local comStart='%{A1:notify-send -t 10 "Updates" "$(checkupdates)":}'
        local comStop="%{A}"
    fi

    if [[ "$number" -eq 0 ]]; then
        local updateColor="#FF${COLOR_TERM_WHITE_DARK}"
    else
        local updateColor="#FF${COLOR_TERM_YELLOW_DARK}"
    fi
    echo -e "${comStart}%{F$updateColor}\uE00F %{F-}${number}${comStop}"
}

# User
getUser() {
    local comStart="%{A1:bspwm-logout.sh > /dev/null 2>&1:}"
    local comStop="%{A}"
    echo -e "${comStart}%{F#FF${COLOR_TERM_CYAN_DARK}}\uE00E %{F-}${USER}@${HOSTNAME}${comStop}"
}

# Volume
getVolume() {
    # Determine which volume settings use to get info
    local volumeType="$1"
    local cardNumber="$2"
    local lang="$3"
    case "$volumeType" in
        "-a")
            # Alsa
            # Status: on/off
            local volStatus=`amixer get Master | tail -n 1 | cut -d '[' -f 4 | sed 's/].*//g'`
            local volLevel=`amixer get Master | tail -n 1 | cut -d '[' -f 2 | sed 's/%.*//g'`
            local comStart=""
            local comStop=""
            ;;
        "-p")
            # Pulseaudio
            if [[ "$lang" == "fr" ]]; then
                local isMute="Muet"
            else
                local isMute="Mute"
            fi

            local volStatus=`pactl list sinks | grep "$isMute" | head -n "$((cardNumber+1))" | tail -n 1 | cut -d ':' -f 2 | sed 's/ //g'`
            local volLevel=`pactl list sinks | grep "^.Volume" | head -n "$((cardNumber+1))" | tail -n 1 | cut -d ':' -f 4 | cut -d '/' -f 2 | sed 's/ //g' | sed 's/%//g'`
            local comStart="%{A1:pactl -- set-sink-volume $cardNumber +5%:}%{A2:pactl set-sink-mute $cardNumber toggle:}%{A3:pactl -- set-sink-volume $cardNumber -5%:}"
            local comStop="%{A}%{A}%{A}"
            ;;
        *)
            # If not specified, use Alsa
            # Status: on/off
            local volStatus=`amixer get Master | tail -n 1 | cut -d '[' -f 4 | sed 's/].*//g'`
            local volLevel=`amixer get Master | tail -n 1 | cut -d '[' -f 2 | sed 's/%.*//g'`
            local comStart=""
            local comStop=""
            ;;
    esac

    # Return
    if [[ "$volStatus" == "on" ]] || [[ "$volStatus" == "no" ]]; then
        if [[ "$volLevel" -lt 11 ]];then
            echo -e "${comStart}%{F#FF${COLOR_TERM_WHITE_DARK}}\uE051 %{F-}$volLevel%%${comStop}"
        elif [[ "$volLevel" -lt 51 ]]; then
            echo -e "${comStart}%{F#FF${COLOR_TERM_WHITE_DARK}}\uE053 %{F-}$volLevel%%${comStop}"
        else
            echo -e "${comStart}%{F#FF${COLOR_TERM_WHITE_DARK}}\uE152 %{F-}$volLevel%%${comStop}"
        fi
    else
        echo -e "${comStart}%{F#FF${COLOR_TERM_WHITE_DARK}}\uE052 %{F-}Mute${comStop}"
    fi
}



# Workspace
getWorkspace(){
    # Default variables
    local outputType="$2"
    local colorType="$3"
    local colorTemp="0"

    # Desktop variables
    local totalDesktop=`xprop -root _NET_NUMBER_OF_DESKTOPS | awk '{print $3}'`
    local currentStatus="$1"
    #local currentStatus=`bspc control --get-status | cut -d ':' -f "2-$((totalDesktop+1))"`

    local textOut=" "
    for i in `seq 1 $totalDesktop`; do
        local currentDesktopStatus=`echo $currentStatus | cut -d ':' -f "$i" | sed -e "s#[0-9]##g"`
        local currentDesktopName=`echo $currentStatus | cut -d ':' -f "$i" | sed -e "s#^.##g"`

        local comStart="%{A1:bspc desktop -f ^$i:}"
        local comStop="%{A}"

        # Ghosts and Invaders colors
        if [[ "$colorType" == "--place" ]]; then
            colorTemp="$i"
        else
            [[ "$currentDesktopStatus" == "o" ]] && colorTemp=$((colorTemp+1))
        fi

        # Determine which type of output to use (Used inside the 'for' in order to use differents colors for Ghost/Invaders/...) 
        case "$outputType" in
            "--name-underline")
                # Desktop name with an underline
                local occupiedFocused="%{+u}%{U#FF${COLOR_TERM_YELLOW_DARK}}%{F#FF${COLOR_TERM_BLUE_DARK}}$currentDesktopName%{F-}%{U-}%{-u}"
                local occupiedUnfocused="%{F#FF${COLOR_TERM_BLUE_DARK}}$currentDesktopName%{F-}"
                local unoccupiedFocused="%{+u}%{U#FF${COLOR_TERM_YELLOW_DARK}}$currentDesktopName%{U-}%{-u}"
                local unoccupiedUnfocused="$currentDesktopName"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}$currentDesktopName%{F-}"
                ;;
            "--classic")
                # Classic Bullets and Ligns
                local occupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\u2022%{F-}"
                local occupiedUnfocused="\u2022"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}-%{F-}"
                local unoccupiedUnfocused="-"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}\u2022%{F-}"
                ;;
            "--bullets-small")
                # Classic small and big Bullets
                local occupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\uE056%{F-}"
                local occupiedUnfocused="\uE056"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\u2022%{F-}"
                local unoccupiedUnfocused="\u2022"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}\uE056%{F-}"
                ;;
            "--bullets-void")
                # Classic small and big Bullets
                local occupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\uE056%{F-}"
                local occupiedUnfocused="\uE056"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\uE0E6%{F-}"
                local unoccupiedUnfocused="\uE0E6"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}\uE056%{F-}"
                ;;
            "--squares")
                # Classic small and big Bullets
                local occupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\uE057%{F-}"
                local occupiedUnfocused="\uE057"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\uE0E7%{F-}"
                local unoccupiedUnfocused="\uE0E7"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}\uE057%{F-}"
                ;;
            "--pacman")
                # Pacman
                local occupiedFocused="%{F#FF${COLOR_TERM_YELLOW_BRIGHT}}\uE00F%{F-}"
                #local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE0AA%{F-}"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_WHITE_DARK}}\uE056%{F-}"
                local unoccupiedUnfocused="%{F#FF${COLOR_TERM_WHITE_DARK}}\u2022%{F-}"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_BRIGHT}}\uE0AA%{F-}"

                # Ghosts colors
                if [[ "$colorType" == "--place" ]]; then
                    while [[ "$colorTemp" -gt 4 ]]; do
                        colorTemp=$((colorTemp-4))
                    done
                else
                    [[ "$colorTemp" -gt 4 ]] && colorTemp="1"
                fi

                case "$colorTemp" in
                    "1")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE0AA%{F-}"
                        ;;
                    "2")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_CYAN_BRIGHT}}\uE0AA%{F-}"
                        ;;
                    "3")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_GREEN_BRIGHT}}\uE0AA%{F-}"
                        ;;
                    "4")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_BLUE_BRIGHT}}\uE0AA%{F-}"
                        ;;
                    *)
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE0AA%{F-}"
                        ;;
                esac
                ;;
            "--invaders")
                # Invaders
                local occupiedFocused="%{F#FF${COLOR_TERM_YELLOW_BRIGHT}}\uE19D%{F-}"
                #local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE19D%{F-}"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\u2022%{F-}"
                local unoccupiedUnfocused="%{F#FF${COLOR_TERM_WHITE_DARK}}\u2022%{F-}"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_BRIGHT}}\uE19D%{F-}"

                # Invaders colors (unfocused)
                if [[ "$colorType" == "--place" ]]; then
                    while [[ "$colorTemp" -gt 4 ]]; do
                        colorTemp=$((colorTemp-4))
                    done
                else
                    [[ "$colorTemp" -gt 4 ]] && colorTemp="1"
                fi

                case "$colorTemp" in
                    "1")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE19D%{F-}"
                        ;;
                    "2")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_CYAN_BRIGHT}}\uE19D%{F-}"
                        ;;
                    "3")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_GREEN_BRIGHT}}\uE19D%{F-}"
                        ;;
                    "4")
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_BLUE_BRIGHT}}\uE19D%{F-}"
                        ;;
                    *)
                        local occupiedUnfocused="%{F#FF${COLOR_TERM_MAGENTA_BRIGHT}}\uE19D%{F-}"
                        ;;
                esac
                ;;
            *)
                # If not specified, use classic output
                local occupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}\u2022%{F-}"
                local occupiedUnfocused="\u2022"
                local unoccupiedFocused="%{F#FF${COLOR_TERM_BLUE_DARK}}-%{F-}"
                local unoccupiedUnfocused="-"
                local urgentUnfocused="%{F#FF${COLOR_TERM_RED_DARK}}\u2022%{F-}"
                ;;
        esac

        # Return
        case "$currentDesktopStatus" in
            "O"|"U")
                textOut="${textOut}${comStart}${occupiedFocused}${comStop} "
                ;;
            "o")
                textOut="${textOut}${comStart}${occupiedUnfocused}${comStop} "
                ;;
            "u")
                textOut="${textOut}${comStart}${urgentUnfocused}${comStop} "
                ;;
            "F")
                textOut="${textOut}${comStart}${unoccupiedFocused}${comStop} "
                ;;
            "f")
                textOut="${textOut}${comStart}${unoccupiedUnfocused}${comStop} "
                ;;
            *)
                textOut="$textOut"
                ;;
        esac
    done
    echo -e "$textOut"
}
